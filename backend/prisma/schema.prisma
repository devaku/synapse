// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    output        = "../database/generated/prisma"
    binaryTargets = ["windows", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   Int                   @id @default(autoincrement())
    keycloakId           String                @unique @db.VarChar(255)
    username             String                @db.VarChar(255)
    email                String                @db.VarChar(255)
    firstName            String?               @db.VarChar(255)
    lastName             String?               @db.VarChar(255)
    phone                Int?
    lastActivity         DateTime              @default(now()) @db.Timestamp(6)
    isDeleted            Int                   @default(0)
    notification         Notification[]
    logs                 Logs[]
    createdTasks         Task[]
    comment              Comment[]
    taskVisibleToUsers   TaskVisibleToUsers[]
    taskHiddenFromUsers  TaskHiddenFromUsers[]
    teamsUsersBelongTo   TeamsUsersBelongTo[]
    team                 Team[]                @relation("TeamMadeByUser")
    deletionRequest      DeletionRequest[]
    taskUsersSubscribeTo TaskUserSubscribeTo[]
    taskArchived         Task[]                @relation("TaskArchivedBy")
}

model Task {
    id                  Int                   @id @default(autoincrement())
    createdByUserId     Int
    createdByUser       User                  @relation(fields: [createdByUserId], references: [id])
    priority            String
    name                String                @db.VarChar(255)
    description         String                @db.VarChar(255)
    image               String?               @db.VarChar(255)
    startDate           DateTime?             @db.Timestamp(6)
    createdAt           DateTime              @default(now()) @db.Timestamp(6)
    isDeleted           Int                   @default(0)
    completeDate        DateTime?             @db.Timestamp(6)
    isArchived          Int                   @default(0)
    archivedByUserId    Int?
    archivedByUser      User?                 @relation("TaskArchivedBy", fields: [archivedByUserId], references: [id])
    comments            Comment[]
    taskVisibleToUsers  TaskVisibleToUsers[]
    taskHiddenFromUsers TaskHiddenFromUsers[]
    taskVisibleToTeams  TaskVisibleToTeams[]
    deletionRequest     DeletionRequest[]
    taskUserSubscribeTo TaskUserSubscribeTo[]
}

model Team {
    id                 Int                  @id @default(autoincrement())
    name               String               @db.VarChar(255)
    description        String?              @db.VarChar(255)
    createdBy          Int
    createdByUser      User                 @relation("TeamMadeByUser", fields: [createdBy], references: [id])
    createdAt          DateTime             @default(now()) @db.Timestamp(6)
    isDeleted          Int                  @default(0)
    notifications      Notification[]
    taskVisibleToTeams TaskVisibleToTeams[]
    teamsUsersBelongTo TeamsUsersBelongTo[]
}

model Notification {
    id          Int      @id @default(autoincrement())
    name        String   @db.VarChar(255)
    description String   @db.VarChar(255)
    userId      Int
    user        User     @relation(fields: [userId], references: [id])
    teamId      Int?
    team        Team?    @relation(fields: [teamId], references: [id])
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    isDeleted   Int      @default(0)
}

model Logs {
    id          Int      @id @default(autoincrement())
    name        String   @db.VarChar(255)
    description String   @db.VarChar(255)
    userId      Int
    user        User     @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    isDeleted   Int      @default(0)
}

model Comment {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    message   String   @db.VarChar(255)
    task      Task     @relation(fields: [taskId], references: [id])
    taskId    Int
    createdAt DateTime @default(now()) @db.Timestamp(6)
    isDeleted Int      @default(0)
}

model Session {
    sid    String   @id
    sess   Json
    expire DateTime @db.Timestamp(6)

    @@index([expire], name: "IDX_session_expire")
}

model DeletionRequest {
    id                Int      @id @default(autoincrement())
    taskId            Int
    task              Task     @relation(fields: [taskId], references: [id])
    requestedByUserId Int
    requestedByUser   User     @relation(fields: [requestedByUserId], references: [id])
    reason            String   @db.VarChar(255)
    createdAt         DateTime @default(now()) @db.Timestamp(6)
    isDeleted         Int      @default(0)
}

/**
 * LINK TABLES
 */

model TaskUserSubscribeTo {
    taskId Int
    task   Task @relation(fields: [taskId], references: [id])
    userId Int
    user   User @relation(fields: [userId], references: [id])

    @@id([userId, taskId])
}

model TeamsUsersBelongTo {
    userId Int
    user   User @relation(fields: [userId], references: [id])
    teamId Int
    team   Team @relation(fields: [teamId], references: [id])

    @@id([userId, teamId])
}

model TaskVisibleToUsers {
    taskId Int
    task   Task @relation(fields: [taskId], references: [id])
    userId Int
    user   User @relation(fields: [userId], references: [id])

    @@id([userId, taskId])
}

model TaskVisibleToTeams {
    taskId Int
    task   Task @relation(fields: [taskId], references: [id])
    teamId Int
    team   Team @relation(fields: [teamId], references: [id])

    @@id([teamId, taskId])
}

model TaskHiddenFromUsers {
    taskId Int
    task   Task @relation(fields: [taskId], references: [id])
    userId Int
    user   User @relation(fields: [userId], references: [id])

    @@id([userId, taskId])
}
